/*******************************************************************************
*         McStas instrument definition URL=http://www.mcstas.org
*
* Instrument: MARI with Guide upgrade
*
* %Identification
* Written by: M. D. Le
* Date: 22nd Jan 2004.
* Origin: <a href="http://www.isis.stfc.ac.uk">ISIS (UK)</a>
*
* Instrument short description:
* The Multi-Angle Rotor Instrument &#30495&#29702 is a chopper spectrometer on TS1 at
* ISIS with a wide angular coverage from 3° to 134°, a low background
* vertically downwards scattering geometry, and intermediate energy resolution
* from a 4m detector bank.
*
* This instrument definition includes the upgraded guide design as of Feb 24th 2016.
*
* %Example:
*
* %Parameters
* INPUT PARAMETERS:
* ei       : incident energy            [meV]
* freq     : chopper frequency          [Hz]
* type     : chopper package            ['a', 'b', 'c', 'r', 's', 'g','m']
* white    : white beam flag            [true/false]
* disk     : is disk chopper on         [true/false]
*
* Negative or zero ei means that the Fermi chopper is removed.
* white=0 just means that only neutrons within 100us of Ei will be generated
* white=1 means that the full energy distribution will be generate from the source
* So set ei=0 white=1 to get a white beam on the sample.
* The chopper packages are the standard MARI choppers, with parameters from the
* CHOP program. In addition, the Merlin straight Gd chopper package is included
* as the 'm' chopper.
*
* %End
*******************************************************************************/
DEFINE INSTRUMENT ISIS_MARI(Ei=15, int freq=250, string chopper="s", string output_filename="mcstas.mcpl", string sample="cylinder")

DECLARE
%{
  // Conversion factors
  double e2v = 5.2276e-6;        // meV to m/s: v=sqrt(E/e2v), E=e2v*v**2
  // Source
  double emin, emax;
  // Guide coating properties (from FLEXX)
  double MGUIDE=3.;
  double W_para = 0.0025;        // Width of supermirror cut-off (Angstrom^-1)
  double R0_para = 0.99;         // Low-angle reflectivity
  double Qc_para = 0.0217;       // Critical scattering vector (Angstrom^-1)
  double alpha_para = 3.90;      // Slope of reflectivity (Angstrom)
  // Fermi
  double pslit, dslat, Fermi_radius, Fermi_curvature, Fermi_nslit, Fermi_phase, Fermi_length;
  // Disk chopper
  double Disk_distance = 8;
  double Disk_phase;
  double foc;
  double disk_radius = 0.367;
  int numdisk=4, diskfreq=50;
  double phi2=36.28, phi3=72.56, phi4=145.12, wd1=10, wd2=10, wd3=10, wd4=10;
  int estep;
  int white = 0;
  int disk = 1;
  int plate;
%}

INITIALIZE
%{
  // Handle the Fermi types. Numbers from PyChop (RAE)
  switch(chopper[0]) {
    case 'a':
    case 'A':
      pslit = 0.76/1000.;
      dslat = (0.76+0.55)/1000.0;
      Fermi_radius = 0.049;
      Fermi_curvature = 1./1.3;
      Fermi_length = 0.05;
      fprintf(stderr,"A Chopper (500meV) selected\n");
      break;
    case 'b':
    case 'B':
      pslit = 1.14/1000.;
      dslat = (1.14+0.55)/1000.0;
      Fermi_radius = 0.049;
      Fermi_curvature = 1./0.82;
      Fermi_length = 0.05;
      fprintf(stderr,"B Chopper (200meV) selected\n");
      break;
    case 'c':
    case 'C':
      pslit = 1.52/1000.;
      dslat = (1.52+0.55)/1000.0;
      Fermi_radius = 0.049;
      Fermi_curvature = 1./0.58;
      Fermi_length = 0.05;
      fprintf(stderr,"C Chopper (100meV) selected\n");
      break;
    case 'g':
    case 'G':
      pslit = 0.38/1000.;
      dslat = (0.38+0.02)/1000.0;
      Fermi_radius = 0.050;
      Fermi_curvature = 1./0.8;
      Fermi_length = 0.01;
      fprintf(stderr,"Gadolinium chopper selected\n");
      break;
    case 'm':
    case 'M':
      pslit = 0.2/1000.;
      dslat = (0.2+0.02)/1000.;
      Fermi_curvature = 0;
      Fermi_radius = 0.05;
      Fermi_length = 0.01;
      fprintf(stderr,"Merlin Gd chopper selected\n");
      break;
    case 's':
    case 'S':
      pslit = 2.28/1000.;
      dslat = (2.28+0.55)/1000.0;
      Fermi_radius = 0.049;
      Fermi_curvature = 1./1.3;
      Fermi_length = 0.05;
      fprintf(stderr,"Sloppy chopper selected\n");
      break;
    case 'r':
    case 'R':
      pslit = 1.143/1000.;
      dslat = (1.143+0.55)/1000.0;
      Fermi_radius = 0.049;
      Fermi_curvature = 1./1.3;
      Fermi_length = 0.05;
      fprintf(stderr,"Relaxed Chopper (500meV) selected\n");
      break;
    default:
      fprintf(stderr,"Chopper Type not recognised\n");
      exit(1);
  }
  Fermi_nslit = round(Fermi_radius*2./dslat);

  // Source parameters
  // Hard code fermi distance = 10m
  Fermi_phase = ((10+0.06) * sqrt(e2v/Ei));   // in seconds!
  Disk_phase = ((Disk_distance+0.06) * sqrt(e2v/Ei));
  // Need it as an angle...
  Disk_phase *= (2*PI) * diskfreq * RAD2DEG;
  if(white==0) {
    // Monochromatic, only give neutrons within +/-100us of desired Ei
    emin = (Fermi_phase+100e-6)/(10+0.06); emin = e2v/emin/emin;
    emax = (Fermi_phase-100e-6)/(10+0.06); emax = e2v/emax/emax;
  }
  else {
    emin = 2.;
    emax = 2000.;
  }
  estep = (int)ceil((emax-emin)/0.1);
  plate = strcmp(sample, "plate")==0 ? 1 : 0;
  fprintf(stdout, "plate = %d\n", plate);
%}

TRACE

COMPONENT Origin = Progress_bar()
AT (0,0,0) ABSOLUTE

// At 800MeV
// Scale factor at 700MeV:
//   Water / Methane: 0.9
//   Merlin: 0.88
//   Hydrogen: 0.7
COMPONENT Source = ViewModISIS(
    Face = "TS1_S06_Mari.mcstas", E0 = emin, E1 = emax,
    modPosition = 0, xw = 0.12, yh = 0.12, focus_xw = 0.091, focus_yh = 0.091, dist = 1.65)
  AT (0, 0, 0) RELATIVE Origin

COMPONENT Guide1_Shield = Slit(
    xwidth = 0.091, yheight = 0.091)
  AT (0, 0, 1.65) RELATIVE Origin ROTATED (0, 0, 0) RELATIVE Origin

COMPONENT Guide1 = Guide(
    w1 = 0.09, h1 = 0.09, w2 = 0.08131, h2 = 0.08131, l = 1.9379, R0=R0_para, Qc=Qc_para, alpha=alpha_para, m=MGUIDE, W=W_para)
  AT (0, 0, 1.6604) RELATIVE Origin

COMPONENT Guide2 = Guide(
    w1 = 0.08085, h1 = 0.08085, w2 = 0.07019, h2 = 0.07019, l = 2.379, R0=R0_para, Qc=Qc_para, alpha=alpha_para, m=MGUIDE, W=W_para)
  AT (0, 0, 3.701) RELATIVE Origin

/*
// Guide 3 with V-cavity
COMPONENT Guide3vcav = vmirror(
    x1 = 0.07014, y1 = 0.07014, x2 = 0.06389, y2 = 0.06389, length = 0.2,
    rParTB = {0.99, 0.0217, 3.9, 5, 0.0025},
    rParLR = {0.99, 0.0217, 3.9, 5, 0.0025},
    rUpParv1 = {0.99, 0.0217, 3.9, 5, 0.0025},
    rUpParv2 = {0.99, 0.0217, 3.9, 5, 0.0025},
    rDownParv1 = {0.99, 0.0217, 3.9, 5, 0.0025},
    rDownParv2 = {0.99, 0.0217, 3.9, 5, 0.0025})
  AT (0, 0, 6.092) RELATIVE Origin
COMPONENT Guide3 = Guide(
    w1 = 0.06389, h1 = 0.06389, w2 = 0.063, h2 = 0.063, l = 1.393, R0=R0_para, Qc=Qc_para, alpha=alpha_para, m=MGUIDE, W=W_para)
  AT (0, 0, 6.293) RELATIVE Origin
*/
COMPONENT Guide3 = Guide(
    w1 = 0.07014, h1 = 0.07014, w2 = 0.063, h2 = 0.063, l = 1.593, R0=R0_para, Qc=Qc_para, alpha=alpha_para, m=MGUIDE, W=W_para)
  AT (0, 0, 6.092) RELATIVE Origin
/*
// Dimensions from drawing: 0-SI-2700-166-00-C
COMPONENT Disk1 = DiskChopper(
    radius = disk_radius, theta_0 = wd1, yheight = 0.102, nu = diskfreq, nslit = 1, phase = Disk_phase)
  WHEN (disk>0)
  AT (0, 0, Disk_distance) RELATIVE Origin
  GROUP DISKS1
COMPONENT Disk2 = DiskChopper(
    radius = disk_radius, theta_0 = wd2, yheight = 0.102, nu = diskfreq, nslit = 1, phase = Disk_phase+phi2)
  WHEN (disk>0)
  AT (0, 0, Disk_distance) RELATIVE Origin
  GROUP DISKS1
COMPONENT Disk3 = DiskChopper(
    radius = disk_radius, theta_0 = wd3, yheight = 0.102, nu = diskfreq, nslit = 1, phase = Disk_phase+phi3)
  WHEN (disk>0)
  AT (0, 0, Disk_distance) RELATIVE Origin
  GROUP DISKS1
COMPONENT Disk4 = DiskChopper(
    radius = disk_radius, theta_0 = wd4, yheight = 0.102, nu = diskfreq, nslit = 1, phase = Disk_phase+phi4)
  WHEN (disk>0)
  AT (0, 0, Disk_distance) RELATIVE Origin
  GROUP DISKS1

COMPONENT Disk1b = DiskChopper(
    radius = disk_radius, theta_0 = wd1, yheight = 0.102, nu = -diskfreq, nslit = 1, phase = Disk_phase)
  WHEN (disk>0)
  AT (0, 0, Disk_distance+0.01) RELATIVE Origin
  GROUP DISKS2
COMPONENT Disk2b = DiskChopper(
    radius = disk_radius, theta_0 = wd2, yheight = 0.102, nu = -diskfreq, nslit = 1, phase = Disk_phase+phi2)
  WHEN (disk>0)
  AT (0, 0, Disk_distance+0.01) RELATIVE Origin
  GROUP DISKS2
COMPONENT Disk3b = DiskChopper(
    radius = disk_radius, theta_0 = wd3, yheight = 0.102, nu = -diskfreq, nslit = 1, phase = Disk_phase+phi3)
  WHEN (disk>0)
  AT (0, 0, Disk_distance+0.01) RELATIVE Origin
  GROUP DISKS2
COMPONENT Disk4b = DiskChopper(
    radius = disk_radius, theta_0 = wd4, yheight = 0.102, nu = -diskfreq, nslit = 1, phase = Disk_phase+phi4)
  WHEN (disk>0)
  AT (0, 0, Disk_distance+0.01) RELATIVE Origin
  GROUP DISKS2
*/
/*
COMPONENT M1 = Monitor_nD(
    options = "square t limits[0,0.02] bins=2000",
    filename = "M1.dat", xwidth=0.2, yheight = 0.2)
  AT (0, 0, Disk_distance+0.02) RELATIVE Origin
*/
COMPONENT Guide4 = Guide(
    w1 = 0.06015, h1 = 0.06015, w2 = 0.0538, h2 = 0.0538, l = 1.417, R0=R0_para, Qc=Qc_para, alpha=alpha_para, m=MGUIDE, W=W_para)
  AT (0, 0, 8.32) RELATIVE Origin

COMPONENT Fermi = FermiChopper(
    radius = Fermi_radius, nu = freq, delay = Fermi_phase, w = pslit, nslit = Fermi_nslit, length = Fermi_length,
    R0 = 0, m = 0, yheight = 0.1, curvature = Fermi_curvature, zero_time = 0)
  AT (0, 0, 10) RELATIVE Origin
/*
COMPONENT M2 = Monitor_nD(
    options = "square t limits[0,0.02] bins=2000",
    filename = "M2.dat", xwidth=0.05, yheight = 0.05)
  AT (0, 0, 0.22) RELATIVE Fermi
*/
COMPONENT Guide5 = Guide(
    w1 = 0.05152, h1 = 0.05152, w2 = 0.04656, h2 = 0.04656, l = 1.106, R0=R0_para, Qc=Qc_para, alpha=alpha_para, m=MGUIDE, W=W_para)
  AT (0, 0, 10.245) RELATIVE Origin

COMPONENT Sample_Diaphragm = Slit(
    xwidth = 0.05, yheight = 0.05)
  AT (0, 0, 11.351) RELATIVE Origin

COMPONENT Sample_Position = Arm()
  AT (0, 0, 11.7) RELATIVE Origin

COMPONENT Sample = Incoherent(
  radius = 0.04, yheight = 0.04, thickness = 0.005)
  AT (0, 0, 0) RELATIVE Sample_Position ROTATED (0, 0, -90) RELATIVE Sample_Position

// Keeping it simple... no gaps! 4m from sample, 3x1' tubes
COMPONENT Detector = Monitor_nD(
    options = "banana, auto t bins=200, theta limits[3.43 134.14] bins=200",
    filename = "Detector.dat",  radius=4.0,  yheight = 0.9)
  AT (0, 0, 0) RELATIVE Sample_Position ROTATED (0, 0, -90) RELATIVE Sample_Position
/*
COMPONENT M3 = Monitor_nD(
    options = "square t limits[0,0.02] bins=2000",
    filename = "M3.dat", xwidth=0.4, yheight = 0.4, restore_neutron=1)
  AT (0, 0, 5.82) RELATIVE Sample_Position
*/
FINALLY
%{
%}

END
