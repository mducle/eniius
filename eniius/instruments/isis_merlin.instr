/*******************************************************************************
*         McStas instrument definition URL=http://www.mcstas.org
*
* Instrument: ISIS_MERLIN
*
* %Identification
* Written by: Rob Bewley
* Date: May 2017.
* Origin: <a href="http://www.isis.stfc.ac.uk">ISIS (UK)</a>
* %INSTRUMENT_SITE: ISIS
*
* MERLIN (Medium-energy resolution, large intensity of neutrons):
* A High count rate, medium energy resolution, direct geometry chopper spectrometer.
*
* %Description
* Merlin has been in user operation since 2008. It was designed to be a high intensity, medium energy
* resolution spectrometer that would complement the high-resolution MAPS spectrometer, and replace
* the HET spectrometer. Merlin's design exploited recent advances in technology with a supermirror
* guide to enhance flux, as well as 3 m long position-sensitive detectors in a vacuum, making it
* ideal for the study of single crystals. The detector bank covers a massive \pi steradians of solid
* angle with an angular range from -45 to 135 degrees in the horizontal plane, and \pm 30 degrees in
* the vertical plane. This allows large swathes of Q,\omega space to be accessed in a single run.
*
* Since 2014, Merlin has been running in event mode, and by using the new Gd chopper combined with a
* disk chopper, it is able to run in repetition-rate multiplication (RRM) mode, allowing users to
* simultaneously measure with several incident energies.
*
* %Parameters
* INPUT PARAMETERS:
* Ei              : energy selected by chopper [meV]
* freq            : frequency of chopper rotation [Hz]
* chopper         : chopper package string ["g" (gadolinium), "s" (sloppy) or "b"]
*
* %L
* <a href="http://www.isis.stfc.ac.uk/instruments/merlin">http://www.isis.stfc.ac.uk/instruments/merlin</a>
* %E
*******************************************************************************/

DEFINE INSTRUMENT MERLIN(Ei=80.0, freq=200.0, string chopper="G")

DECLARE
%{
double slit_curv,num_slits,width,len;
double phase_time, E_min, E_max;
%}

// #include <math.h>

INITIALIZE
%{
switch(chopper[0]) {
  case 'b':
  case 'B':
    slit_curv=1/0.82;
    num_slits=55;
    width=0.00114;
    len=0.099;
    fprintf(stderr,"MERLIN b chopper selected");
    break;
  case 's':
  case 'S':
    slit_curv=1/1.3;
    num_slits=28;
    width=0.00228;
    len=0.099;
    fprintf(stderr,"MERLIN Sloppy selected selected");
    break;
  case 'g':
  case 'G':
    slit_curv=0;
    num_slits=350;
    width=0.0002;
    len=0.01;
    fprintf(stderr,"Merlin Gd selected selected");
    break;
  default:
    fprintf(stderr,"Chopper Type not recognised\n");
    exit(1);
}
/* calculate opening time of the fermi chopper at 10m from moderator*/
phase_time = (2.28e-3*(10.0)/sqrt(Ei));
printf("\nphase_time: %f\n\n",phase_time);
E_min = 2.28e-3 * 10.0 / (phase_time+5.e-4); E_min *= E_min;
E_max = 2.28e-3 * 10.0 / (phase_time-5.e-4); E_max *= E_max;
%}

TRACE

// define origin //
COMPONENT Origin = Arm()
  AT (0,0,0) ABSOLUTE

// The moderator //
COMPONENT moderator = ViewModISIS(
    Face="TS1_S04_Merlin.mcstas", E0 = E_min, E1 = E_max,
    dist = 1.7, focus_xw = 0.094, focus_yh = 0.094, modPosition = 0, xw = 0.12, yh = 0.12)
 AT (0,0,0) RELATIVE Origin
  EXTEND
  %{
      // JSON encoded string for parameters needed by HORACE.
      char eniius_data[] =
          "{'function_pulse_shape': \
                {'type':'NXnote', 'value': { \
                    'data': '\
def mcstas_time_profile(Face, Ei):<nl>\
<tb>with open(Face, <qt>r<qt>) as f:<nl>\
<tb><tb>dat = f.read().replace(<qt>(<qt>,<qt><qt>).replace(<qt>)<qt>,<qt><qt>).split(<qt><bs>n<qt>)<nl>\
<tb>id0, en, intens = (dat.index(<qt> time <qt>), [], [])<nl>\
<tb>n = dat.index(<qt> time <qt>, id0 + 1) - id0 - 6<nl>\
<tb># time data originally in ns, energy in MeV<nl>\
<tb>t = np.loadtxt(dat[(id0+1):(id0+n)], usecols=(0)) / 100<nl>\
<tb>dt = np.diff(t)<nl>\
<tb>while True:<nl>\
<tb><tb>e0 = np.loadtxt(dat[id0-2].split()[2:5:2]) * 1.e9<nl>\
<tb><tb>i0 = np.loadtxt(dat[(id0+1):(id0+n)], usecols=(1))<nl>\
<tb><tb>en.append(np.mean(e0))<nl>\
<tb><tb>intens.append((i0[:-1] / dt) / (e0[1] - e0[0]))<nl>\
<tb><tb>try:<nl>\
<tb><tb><tb>id0 = dat.index(<qt> time <qt>, id0 + 1)<nl>\
<tb><tb>except ValueError:<nl>\
<tb><tb><tb>break<nl>\
<tb>en, intens, tlog = (np.log(en), np.array(intens), np.log(t))<nl>\
<tb>kp = np.where(t < 2000)[0]<nl>\
<tb>ie = np.where(en < np.log(Ei))[0][-1]<nl>\
<tb>frac = (np.log(Ei) - en[ie]) / (en[ie+1] - en[ie])<nl>\
<tb>return intens[ie,kp] + frac * (intens[ie+1,kp] - intens[ie,kp])<nl>',\
                    'globals': 'np:numpy, open:open, ValueError:ValueError',\
                    'type': 'text/x-python', \
                    'description': 'Python script to compute moderator time profile from Ei'} \
                }}";
  %}

COMPONENT aperture = Slit(
    xmin = -0.047, xmax = 0.047, ymin = -0.047, ymax = 0.047)
  AT (0, 0, 1.7) RELATIVE Origin
  EXTEND
  %{
      // JSON encoded string for parameters needed by HORACE.
      char eniius_data[] =
          "{'parameter_function': \
                {'type':'NXnote', 'value': { \
                    'data': '\
def scale_x_gap(Ei):<nl>\
<tb>l = np.sqrt(81.804201263673718 / np.array(ei))<nl>\
<tb>if l > 3.5:<nl>\
<tb><tb>gain = 10.92390518545 + 5.0628835969606 * (l - 3.5)<nl>\
<tb>else:<nl>\
<tb><tb>gain = 1 + 0.723584927461204 * l - 3.461019858758497 * l**2 \
                 + 6.870176815937414 * l**3 - 3.962250897938358 * l**4 \
                 + 0.960065940459538 * l**5 - 0.084008173502155 * l**6<nl>\
<tb>return gain<nl>\
def scale_y_gap(Ei):<nl>\
<tb>return scale_x_gap(Ei)<nl>', \
                    'type': 'text/x-python', \
                    'description': 'Python script to compute aperture parameter from Ei'} \
                }}";
  %}

// 1st piece of guide in shutter //
COMPONENT guide1_shutter = Guide_channeled(
    w1 = 0.094, h1 = 0.094, w2 = 0.094, h2 = 0.094, l = 2.0, alphax = 4.38, alphay = 4.38 ,
 W=3e-3, mx = 3, my = 3)
  AT (0, 0, 1.7) RELATIVE Origin

// 2nd piece of guide converging to chopper pit //
COMPONENT guide2_converging = Guide_channeled(
    w1 = 0.094, h1 = 0.094, w2 = 0.067, h2 = 0.067, l = 4.760, alphax = 4.38, alphay = 4.38 ,
 W=3e-3, mx = 3, my = 3)
  AT (0, 0, 3.704) RELATIVE Origin

// 3rd piece of guide leading to fermi chopper//
COMPONENT guide3_betweenchoppers = Guide_channeled(
    w1 = 0.0629, h1 = 0.0629, w2 = 0.0594, h2 = 0.0594, l = 0.640, alphax = 4.38, alphay = 4.38 ,
 W=3e-3, mx = 3, my = 3)
  AT (0, 0, 9.182) RELATIVE Origin

// the fermi chopper //
COMPONENT fermi = FermiChopper(delay=phase_time, radius=0.055, nu=-freq,
  yheight=0.07, w=width, nslit=num_slits, R0=0.0,
  Qc=0.02176, alpha=2.33, m=0, length=len, eff=0.95, curvature=-slit_curv, zero_time=0)
  AT (0,0,10) RELATIVE Origin//

// final guide section just before sample //
COMPONENT guide4_final = Guide_channeled(
    w1 = 0.0568, h1 = 0.0568, w2 = 0.0506, h2 = 0.0506, l = 1.10, alphax = 4.38, alphay = 4.38 ,
 W=3e-3, mx = 3, my = 3)
  AT (0, 0, 10.277) RELATIVE Origin

COMPONENT sampleslit2 = Slit(
    xmin = -0.025, xmax = 0.025, ymin = -0.025, ymax = 0.025)
  AT (0, 0, 11.38) RELATIVE Origin

COMPONENT sample_position = Arm()
  AT (0, 0, 11.8) RELATIVE Origin

COMPONENT sample = Incoherent(
  radius = 0.02, yheight = 0.04, thickness = 0.005)
  AT (0, 0, 0) RELATIVE sample_position

// Keep it simple, ignore gaps between doors
COMPONENT detector = Monitor_nD(
    options = "banana, auto t bins=200, theta limits[-45.0 134.7] bins=200",
    filename = "Detector.dat",  radius=2.5,  yheight = 3.0)
  AT (0, 0, 0) RELATIVE sample_position

END
